import asyncio
import logging
import random
import sqlite3
from datetime import datetime, timedelta
from typing import List

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

from telethon import TelegramClient
from telethon.errors.rpcerrorlist import PhoneNumberInvalidError

# ==== CONFIGURATION ====

API_TOKEN = '8178341358:AAG1UEVB-mPlhh-TNks64iVhOm6Avr4DgDg'

# Telegram API credentials (telethon)
API_ID = 29688700            # рждрзЛржорж╛рж░ api_id
API_HASH = 'edc5c355c1fb49ed6101b0fcd30531ad'  # рждрзЛржорж╛рж░ api_hash

# Nexmo SMS config
NEXMO_API_KEY = "9cbaa3d7"
NEXMO_API_SECRET = "gJ8qCUu0RqxTCnYH"
NEXMO_SENDER = "NEXMO"

ADMINS = [7471439777, 1868731287]

# ==== SETUP LOGGING ====

logging.basicConfig(level=logging.INFO)

# ==== DATABASE ====

conn = sqlite3.connect('otp_data.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS otps (
    user_id INTEGER PRIMARY KEY,
    phone TEXT NOT NULL,
    otp TEXT NOT NULL,
    timestamp TEXT NOT NULL,
    resend_count INTEGER DEFAULT 0,
    last_sent TEXT
)
''')
conn.commit()

# ==== BOT SETUP ====

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ==== TELETHON CLIENT SETUP ====

# Telethon client (Session name can be anything, e.g. 'session')
tele_client = TelegramClient('session', API_ID, API_HASH)

# ==== HELPERS ====

def send_otp_sms(phone_number: str, otp_code: str) -> bool:
    url = "https://rest.nexmo.com/sms/json"
    payload = {
        "api_key": NEXMO_API_KEY,
        "api_secret": NEXMO_API_SECRET,
        "to": phone_number,
        "from": NEXMO_SENDER,
        "text": f"Your OTP code is {otp_code}"
    }
    try:
        response = requests.post(url, data=payload)
        result = response.json()
        if response.status_code == 200 and result["messages"][0]["status"] == "0":
            return True
        else:
            logging.error(f"Failed to send SMS: {result}")
            return False
    except Exception as e:
        logging.error(f"Exception in sending SMS: {e}")
        return False

def save_otp(user_id: int, phone: str, otp: str):
    now_str = datetime.utcnow().isoformat()
    cursor.execute('SELECT resend_count, last_sent FROM otps WHERE user_id=?', (user_id,))
    row = cursor.fetchone()
    if row:
        resend_count, last_sent = row
        resend_count = resend_count + 1 if resend_count else 1
        cursor.execute('UPDATE otps SET phone=?, otp=?, timestamp=?, resend_count=?, last_sent=? WHERE user_id=?',
                       (phone, otp, now_str, resend_count, now_str, user_id))
    else:
        cursor.execute('INSERT INTO otps (user_id, phone, otp, timestamp, resend_count, last_sent) VALUES (?, ?, ?, ?, ?, ?)',
                       (user_id, phone, otp, now_str, 1, now_str))
    conn.commit()

def get_otp(user_id: int):
    cursor.execute('SELECT otp, timestamp, resend_count, last_sent, phone FROM otps WHERE user_id=?', (user_id,))
    row = cursor.fetchone()
    if row:
        otp, timestamp, resend_count, last_sent, phone = row
        return otp, timestamp, resend_count, last_sent, phone
    return None, None, 0, None, None

def delete_otp(user_id: int):
    cursor.execute('DELETE FROM otps WHERE user_id=?', (user_id,))
    conn.commit()

def is_otp_expired(timestamp_str: str) -> bool:
    try:
        timestamp = datetime.fromisoformat(timestamp_str)
        expire_time = timestamp + timedelta(minutes=5)
        return datetime.utcnow() > expire_time
    except:
        return True

def can_resend_otp(last_sent_str: str) -> bool:
    if not last_sent_str:
        return True
    try:
        last_sent = datetime.fromisoformat(last_sent_str)
        limit_time = last_sent + timedelta(minutes=2)
        return datetime.utcnow() > limit_time
    except:
        return True

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# ==== TELETHON NUMBER CHECKING FUNCTION ====

async def check_number_telethon(phone_number: str) -> str:
    # ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ ржирж╛ржорзНржмрж╛рж░ржЯрж┐ Telegram ржП рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рждрзЗ
    try:
        # Telethon ржПрж░ check_username_available ржлрж╛ржВрж╢ржи ржирж╛ржорзНржмрж╛рж░ ржЪрзЗржХ ржХрж░рждрзЗ ржирзЗржЗ, рждрж╛ржЗ
        # ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ Try/Except ржжрж┐рзЯрзЗ ржлрзЛржи ржиржорзНржмрж░рзЗрж░ ржнрзНржпрж╛рж▓рж┐ржбрж┐ржЯрж┐ ржУ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржПржХрж╛ржЙржирзНржЯ ржЖржЫрзЗ ржХрж┐ржирж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░ржм
        await tele_client.connect()
        # Telethon ржПрж░ sign_in ржмрж╛ ржЕржирзНржп method ржП рж╕рж░рж╛рж╕рж░рж┐ ржирж╛ржорзНржмрж╛рж░ ржпрж╛ржЪрж╛ржЗ рж╕рж╣ржЬ ржирзЯ
        # рждрж╛ржЗ ржЖржорж░рж╛ ржПржЦрж╛ржирзЗ рж╢рзБржзрзБ ржлрзЛржи ржирж╛ржорзНржмрж╛рж░ ржлрж░ржорзНржпрж╛ржЯ ржмрж╛ ржнрзНржпрж╛рж▓рж┐ржб ржХрж┐ржирж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░ржм (рж╕рж┐ржорзНржкрж▓) 
        # тАФ ржирж╛ржорзНржмрж╛рж░ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ ржирж╛ рж╣рж▓рзЗ PhoneNumberInvalidError ржЖрж╕ржмрзЗ
        # ржПржХрзНрж╖рзЗрждрзНрж░рзЗ ржЖржорж░рж╛ ржирж╛ржорзНржмрж╛рж░ ржнрзНржпрж╛рж▓рж┐ржб ржмрж▓ржм, ржХрж┐ржирзНрждрзБ Telegram ржП рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж┐ржирж╛ ржЖрж▓рж╛ржжрж╛ API ржжрж┐рзЯрзЗ ржЪрзЗржХ ржХрж░рждрзЗ рж╣ржмрзЗ
        # ржПржЬржирзНржп ржПржЯрж┐ рж╕рж┐ржорзБрж▓рзЗрж╢ржи - ржЖрж╕рж▓ Telegram registration ржЪрзЗржХ ржХрж░рж╛ рж╣рж▓рзЗ ржЖрж▓рж╛ржжрж╛ code рж▓рж╛ржЧржмрзЗ
        if len(phone_number) < 10 or not phone_number.startswith('+'):
            return "Invalid Format"
        return "Valid"  # рж╕рж┐ржорзБрж▓рзЗрж╢ржи рж╣рж┐рж╕рзЗржмрзЗ
    except PhoneNumberInvalidError:
        return "Invalid Number"
    except Exception as e:
        logging.error(f"Telethon check error for {phone_number}: {e}")
        return "Error"

async def bulk_verify_numbers(numbers: List[str]) -> dict:
    results = {}
    for number in numbers:
        result = await check_number_telethon(number)
        results[number] = result
    return results

# ==== HANDLERS ====

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = (
        "ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ рждрзЛржорж╛рж░ OTP ржкрж╛ржарж╛ржирзЛрж░ ржмржЯред\n\n"
        "ржмрзНржпржмрж╣рж╛рж░:\n"
        "ЁЯУ▓ /sendotp +8801XXXXXXXXX\n"
        "тЬЕ /verify 123456\n"
        "ЁЯУЛ /bulkcheck +8801xxx,+8801yyy\n\n"
        "ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржбрзЗрж░ ржЬржирзНржп /admin"
    )
    await message.answer(welcome_text)

@dp.message(Command("sendotp"))
async def sendotp_handler(message: Message):
    args = message.text.split(maxsplit=1)
    user_id = message.from_user.id

    if len(args) < 2:
        await message.reply("ржжрзЯрж╛ ржХрж░рзЗ ржлрзЛржи ржиржорзНржмрж░ ржжрж┐ржи, ржпрзЗржоржи:\n/sendotp +8801712345678")
        return

    phone = args[1].strip()
    _, _, _, last_sent, _ = get_otp(user_id)

    if not can_resend_otp(last_sent):
        await message.reply("тП│ ржЖржмрж╛рж░ OTP ржкрж╛ржарж╛рждрзЗ рзи ржорж┐ржирж┐ржЯ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
        return

    otp = str(random.randint(100000, 999999))
    save_otp(user_id, phone, otp)

    await message.reply(f"тП│ OTP ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ {phone} ржиржорзНржмрж░рзЗ...")
    success = send_otp_sms(phone, otp)
    if success:
        await message.reply(f"тЬЕ OTP ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ! ржХрзЛржб: {otp}\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ред")
    else:
        await message.reply("тЭМ OTP ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

@dp.message(Command("verify"))
async def verify_handler(message: Message):
    args = message.text.split(maxsplit=1)
    user_id = message.from_user.id

    if len(args) < 2:
        await message.reply("OTP ржжрж┐ржи, ржпрзЗржоржи:\n/verify 123456")
        return

    entered_otp = args[1].strip()
    saved_otp, timestamp_str, _, _, _ = get_otp(user_id)

    if not saved_otp:
        await message.reply("тЭМ рждрзЛржорж╛рж░ ржЬржирзНржп OTP ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржкрзНрж░ржержорзЗ /sendotp ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред")
        return

    if is_otp_expired(timestamp_str):
        delete_otp(user_id)
        await message.reply("тП░ OTP ржПрж░ ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ред ржирждрзБржи OTP ржирж┐рждрзЗ /sendotp ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")
        return

    if entered_otp == saved_otp:
        delete_otp(user_id)
        await message.reply("тЬЕ OTP рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрж╛ржЪрж╛ржЗ рж╣ржпрж╝рзЗржЫрзЗ!")
    else:
        await message.reply("тЭМ OTP ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

@dp.message(Command("bulkcheck"))
async def bulkcheck_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("ржХржорж╛ ржжрж┐рзЯрзЗ ржлрзЛржи ржиржорзНржмрж░ ржжрж┐ржи:\n/bulkcheck +8801xxxx,+8801yyyy")
        return
    numbers = [num.strip() for num in args[1].split(',')]
    await message.reply("тП│ ржирж╛ржорзНржмрж╛рж░ ржпрж╛ржЪрж╛ржЗ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...")
    results = await bulk_verify_numbers(numbers)
    response = "ЁЯУЛ ржмрж╛рж▓рзНржХ ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржлрж▓рж╛ржлрж▓:\n"
    for num, status in results.items():
        response += f"{num} : {status}\n"
    await message.reply(response)

@dp.message(Command("admin"))
async def admin_handler(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("тЭМ рждрзБржорж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржУред")
        return
    admin_text = (
        "ЁЯФз ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб:\n"
        "/stats - ржорзЛржЯ OTP рж░рзЗржХрж░рзНржб ржжрзЗржЦрзБржи\n"
        "/broadcast <ржорзЗрж╕рзЗржЬ> - рж╕ржмрж╛ржЗржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржи\n"
        "/deleteotp <user_id> - ржЗржЙржЬрж╛рж░рзЗрж░ OTP ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи"
    )
    await message.reply(admin_text)

@dp.message(Command("stats"))
async def stats_handler(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("тЭМ ржЕржирзБржорждрж┐ ржирзЗржЗред")
        return
    cursor.execute('SELECT COUNT(*) FROM otps')
    count = cursor.fetchone()[0]
    await message.reply(f"ЁЯУК ржорзЛржЯ OTP рж░рзЗржХрж░рзНржб: {count}")

@dp.message(Command("broadcast"))
async def broadcast_handler(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("тЭМ ржЕржирзБржорждрж┐ ржирзЗржЗред")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("тЭМ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ ржжрж┐ржи, ржпрзЗржоржи:\n/broadcast рж╕ржмрж╛ржЗржХрзЗ рж╢рзБржнрзЗржЪрзНржЫрж╛!")
        return
    text = args[1]
    cursor.execute('SELECT user_id FROM otps')
    users = cursor.fetchall()
    sent = 0
    for (uid,) in users:
        try:
            await bot.send_message(uid, text)
            sent += 1
        except Exception as e:
            logging.error(f"Broadcast failed to {uid}: {e}")
    await message.reply(f"тЬЕ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ: {sent} ржЬржиржХрзЗред")

@dp.message(Command("deleteotp"))
async def deleteotp_handler(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("тЭМ ржЕржирзБржорждрж┐ ржирзЗржЗред")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].isdigit():
        await message.reply("тЭМ рж╕ржарж┐ржХ user_id ржжрж┐ржи, ржпрзЗржоржи:\n/deleteotp 123456789")
        return
    del_user_id = int(args[1])
    delete_otp(del_user_id)
    await message.reply(f"тЬЕ user_id {del_user_id} ржПрж░ OTP ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

@dp.message()
async def fallback_handler(message: Message):
    await message.reply("тЭУ ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп /start рж▓рж┐ржЦрзБржиред")

# ==== RUN BOT AND TELETHON CLIENT ====

async def main():
    await tele_client.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
