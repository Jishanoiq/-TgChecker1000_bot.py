import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging
import random

# === Configuration ===
API_TOKEN = '8178341358:AAG1UEVB-mPlhh-TNks64iVhOm6Avr4DgDg'  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡¶¨‡ßá
NEXMO_API_KEY = "9cbaa3d7"
NEXMO_API_SECRET = "gJ8qCUu0RqxTCnYH"
NEXMO_SENDER = "NEXMO"  # ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Sender ID ‡¶¶‡¶ø‡¶¨‡ßá

# === Logging setup ===
logging.basicConfig(level=logging.INFO)

# === Bot and Dispatcher ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === Helper function to send SMS via Nexmo ===
def send_otp_sms(phone_number: str, otp_code: str) -> bool:
    url = "https://rest.nexmo.com/sms/json"
    payload = {
        "api_key": NEXMO_API_KEY,
        "api_secret": NEXMO_API_SECRET,
        "to": phone_number,
        "from": NEXMO_SENDER,
        "text": f"Your OTP code is {otp_code}"
    }
    try:
        response = requests.post(url, data=payload)
        result = response.json()
        if response.status_code == 200 and result["messages"][0]["status"] == "0":
            return True
        else:
            logging.error(f"Failed to send SMS: {result}")
            return False
    except Exception as e:
        logging.error(f"Exception in sending SMS: {e}")
        return False

# === Bot command handlers ===

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    welcome_text = (
        "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶¨‡¶ü‡•§\n\n"
        "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:\n"
        "üì≤ /sendotp +8801XXXXXXXXX\n"
        "‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§\n\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /sendotp +8801712345678"
    )
    await message.answer(welcome_text)

@dp.message_handler(commands=['sendotp'])
async def sendotp_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®, ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/sendotp +8801712345678")
        return
    
    phone = args.strip()
    # OTP ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡ß¨ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü)
    otp = str(random.randint(100000, 999999))
    
    await message.reply(f"‚è≥ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá {phone} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá...")
    
    success = send_otp_sms(phone, otp)
    
    if success:
        await message.reply(f"‚úÖ OTP ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá!\nOTP: {otp}\n(‡¶®‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¶‡¶ø‡¶¨‡ßá ‡¶®‡¶æ)")
    else:
        await message.reply("‚ùå OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")

@dp.message_handler()
async def default_handler(message: types.Message):
    await message.reply("‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /start ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")

# === Run bot ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
