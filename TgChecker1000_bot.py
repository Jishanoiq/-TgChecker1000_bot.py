import asyncio
import logging
import random
import sqlite3
from datetime import datetime, timedelta
from typing import List

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# === Configuration ===
API_TOKEN = '8178341358:AAG1UEVB-mPlhh-TNks64iVhOm6Avr4DgDg'  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Bot Token
NEXMO_API_KEY = "9cbaa3d7"
NEXMO_API_SECRET = "gJ8qCUu0RqxTCnYH"
NEXMO_SENDER = "NEXMO"  # Sender ID

# ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram user ID (‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ admin ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶¨‡ßá)
ADMINS = [7471439777, 1868731287]  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram ID ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡ßã

# === Logging setup ===
logging.basicConfig(level=logging.INFO)

# === Bot setup ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === DB setup ===
conn = sqlite3.connect('otp_data.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS otps (
    user_id INTEGER PRIMARY KEY,
    phone TEXT NOT NULL,
    otp TEXT NOT NULL,
    timestamp DATETIME NOT NULL,
    resend_count INTEGER DEFAULT 0,
    last_sent DATETIME
)
''')
conn.commit()

# === Helper functions ===

def send_otp_sms(phone_number: str, otp_code: str) -> bool:
    url = "https://rest.nexmo.com/sms/json"
    payload = {
        "api_key": NEXMO_API_KEY,
        "api_secret": NEXMO_API_SECRET,
        "to": phone_number,
        "from": NEXMO_SENDER,
        "text": f"Your OTP code is {otp_code}"
    }
    try:
        response = requests.post(url, data=payload)
        result = response.json()
        if response.status_code == 200 and result["messages"][0]["status"] == "0":
            return True
        else:
            logging.error(f"Failed to send SMS: {result}")
            return False
    except Exception as e:
        logging.error(f"Exception in sending SMS: {e}")
        return False

def save_otp(user_id: int, phone: str, otp: str):
    now = datetime.utcnow()
    cursor.execute('SELECT resend_count, last_sent FROM otps WHERE user_id=?', (user_id,))
    row = cursor.fetchone()
    if row:
        resend_count, last_sent = row
        resend_count += 1
        cursor.execute('UPDATE otps SET phone=?, otp=?, timestamp=?, resend_count=?, last_sent=? WHERE user_id=?',
                       (phone, otp, now, resend_count, now, user_id))
    else:
        cursor.execute('INSERT INTO otps (user_id, phone, otp, timestamp, resend_count, last_sent) VALUES (?, ?, ?, ?, ?, ?)',
                       (user_id, phone, otp, now, 1, now))
    conn.commit()

def get_otp(user_id: int):
    cursor.execute('SELECT otp, timestamp, resend_count, last_sent, phone FROM otps WHERE user_id=?', (user_id,))
    row = cursor.fetchone()
    return row if row else (None, None, 0, None, None)

def delete_otp(user_id: int):
    cursor.execute('DELETE FROM otps WHERE user_id=?', (user_id,))
    conn.commit()

def is_otp_expired(timestamp: datetime) -> bool:
    expire_time = timestamp + timedelta(minutes=5)
    return datetime.utcnow() > expire_time

def can_resend_otp(last_sent: datetime) -> bool:
    if not last_sent:
        return True
    limit_time = last_sent + timedelta(minutes=2)
    return datetime.utcnow() > limit_time

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# Bulk verification simulation function
def bulk_verify_numbers(numbers: List[str]) -> dict:
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶∏‡¶≤ ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶ï‡ßã‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶è‡¶ü‡¶æ ‡¶∏‡¶ø‡¶Æ‡ßÅ‡¶≤‡ßá‡¶∂‡¶®
    result = {}
    for number in numbers:
        # ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ú‡ßã‡ßú, ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°
        result[number] = "Valid" if int(number[-1]) % 2 == 0 else "Invalid"
    return result

# === Bot Handlers ===

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    welcome_text = (
        "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶¨‡¶ü‡•§\n\n"
        "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:\n"
        "üì≤ /sendotp +8801XXXXXXXXX\n"
        "OTP ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá:\n"
        "‚úÖ /verify 123456\n\n"
        "‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá:\n"
        "/bulkcheck +8801xxxx,+8801yyyy,+8801zzzz\n\n"
        "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /admin ‡¶¶‡ßá‡¶ñ‡ßã"
    )
    await message.answer(welcome_text)

@dp.message_handler(commands=['sendotp'])
async def sendotp_handler(message: types.Message):
    args = message.get_args()
    user_id = message.from_user.id

    if not args:
        await message.reply("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®, ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/sendotp +8801712345678")
        return
    
    phone = args.strip()
    _, _, resend_count, last_sent, _ = get_otp(user_id)

    if not can_resend_otp(last_sent):
        await message.reply("‚è≥ ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶¨‡¶æ‡¶∞ OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß® ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    otp = str(random.randint(100000, 999999))
    save_otp(user_id, phone, otp)

    await message.reply(f"‚è≥ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá {phone} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá...")

    success = send_otp_sms(phone, otp)
    if success:
        await message.reply(f"‚úÖ OTP ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá!\nOTP: {otp}\n(‡¶®‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¶‡¶ø‡¶¨‡ßá ‡¶®‡¶æ)")
    else:
        await message.reply("‚ùå OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")

@dp.message_handler(commands=['verify'])
async def verify_handler(message: types.Message):
    args = message.get_args()
    user_id = message.from_user.id

    if not args:
        await message.reply("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá OTP ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/verify 863222")
        return
    
    entered_otp = args.strip()
    saved_otp, timestamp_str, _, _, phone = get_otp(user_id)

    if saved_otp is None:
        await message.reply("‚ùå ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã OTP ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶ó‡ßá /sendotp ‡¶¶‡¶ø‡ßü‡ßá OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return

    timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S.%f')
    if is_otp_expired(timestamp):
        delete_otp(user_id)
        await message.reply("‚è∞ OTP ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶â‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® OTP ‡¶®‡¶ø‡¶® /sendotp ‡¶¶‡¶ø‡ßü‡ßá‡•§")
        return

    if entered_otp == saved_otp:
        delete_otp(user_id)
        await message.reply("‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ OTP ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!")
    else:
        await message.reply("‚ùå OTP ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")

@dp.message_handler(commands=['bulkcheck'])
async def bulkcheck_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶ì, ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/bulkcheck +8801712345678,+8801723456789")
        return
    numbers = [num.strip() for num in args.split(',')]
    result = bulk_verify_numbers(numbers)
    response = "üìã ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:\n"
    for num, status in result.items():
        response += f"{num} : {status}\n"
    await message.reply(response)

@dp.message_handler(commands=['admin'])
async def admin_help_handler(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ‡•§ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§")
        return
    text = (
        "üîß ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°:\n"
        "/stats - ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ì OTP ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
        "/broadcast <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú> - ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®\n"
        "/deleteotp <user_id> - ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ OTP ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n"
    )
    await message.reply(text)

@dp.message_handler(commands=['stats'])
async def stats_handler(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ‡•§ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§")
        return
    cursor.execute('SELECT COUNT(*) FROM otps')
    total_otps = cursor.fetchone()[0]
    await message.reply(f"üìä ‡¶Æ‡ßã‡¶ü OTP ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°: {total_otps}")

@dp.message_handler(commands=['broadcast'])
async def broadcast_handler(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ‡•§ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§")
        return
    text = message.get_args()
    if not text:
        await message.reply("‚ùå ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /broadcast ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú")
        return
    
    cursor.execute('SELECT user_id FROM otps')
    users = cursor.fetchall()
    count = 0
    for (uid,) in users:
        try:
            await bot.send_message(uid, text)
            count += 1
        except Exception as e:
            logging.error(f"Broadcast failed to {uid}: {e}")
    await message.reply(f"‚úÖ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Æ‡ßã‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: {count} ‡¶ú‡¶®")

@dp.message_handler(commands=['deleteotp'])
async def deleteotp_handler(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ‡•§ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§")
        return
    args = message.get_args()
    if not args or not args.isdigit():
        await message.reply("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶®, ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n/deleteotp 123456789")
        return
    del_user_id = int(args)
    delete_otp(del_user_id)
    await message.reply(f"‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø {del_user_id} ‡¶è‡¶∞ OTP ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

@dp.message_handler()
async def default_handler(message: types.Message):
    await message.reply("‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /start ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")

# === Run Bot ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
